// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model source {
    id             String  @id
    name           String
    lang           String
    iconUrl        String
    supportsLatest Boolean
    isConfigurable Boolean
    isNsfw         Boolean
    displayName    String
    Manga          Manga[]
}

model Manga {
    id                      Int         @id
    Chapters                Chapter[]   @relation("chapters")
    sourceId                String
    source                  source      @relation(fields: [sourceId], references: [id])
    lastChapterReadID       Int?
    lastChapterRead         Chapter?    @relation("lastChapterRead")
    CategoryID              Int
    Category                Category    @relation(fields: [CategoryID], references: [id])
    url                     String
    title                   String
    thumbnailUrl            String
    thumbnailUrlLastFetched Int
    initialized             Boolean
    artist                  String
    author                  String
    description             String
    status                  String
    inLibrary               Boolean
    inLibraryAt             Int
    realUrl                 String
    lastFetchedAt           Int
    chaptersLastFetchedAt   Int
    freshData               Boolean
    unreadCount             Int
    downloadCount           Int
    chapterCount            Int
    lastReadAt              Int
    age                     Int
    chaptersAge             Int
    ChapError               ChapError[]
}

model Chapter {
    id                Int         @id
    url               String
    name              String
    uploadDate        Int
    chapterNumber     Float
    scanlator         String
    manga             Manga       @relation("chapters", fields: [mangaId], references: [id])
    mangaId           Int
    lastChapterReadID Int?        @unique
    lastChapterRead   Manga?      @relation("lastChapterRead", fields: [lastChapterReadID], references: [id])
    read              Boolean
    bookmarked        Boolean
    lastPageRead      Int
    lastReadAt        Int
    index             Int
    fetchedAt         Int
    realUrl           String
    downloaded        Boolean
    pageCount         Int
    chapterCount      Int
    ChapError         ChapError[]
}

model Category {
    id      Int     @id
    order   Int
    name    String
    default Boolean
    size    Int
    mangas  Manga[]
}

model ChapError {
    id        Int     @id @default(autoincrement())
    manga     Manga   @relation(fields: [mangaId], references: [id])
    mangaId   Int
    lastread  Chapter? @relation(fields: [lastreadId], references: [id])
    lastreadId Int?
}
